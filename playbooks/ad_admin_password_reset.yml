---
# ================== PURPOSE ==================
# Change Only Administrator Passwords in AD
# - Changes Domain Admin, Enterprise Admin passwords
# - Changes built-in Administrator account
# - Logs passwords securely
# =============================================
# USAGE:
#   ansible-playbook playbooks/ad_admin_password_reset.yml

- name: Change AD Administrator Passwords
  hosts: windows:&ad_servers
  gather_facts: true

  vars:
    password_length: 20  # Longer for admin accounts

    # Admin accounts to change
    admin_accounts:
      - "Administrator"
      - "sysadmin"

    # Output file
    admin_password_log: "./ad_admin_passwords_{{ ansible_date_time.epoch }}.txt"

  tasks:
    - name: Ensure output directory exists
      ansible.builtin.file:
        path: "{{ playbook_dir }}/password_logs"
        state: directory
        mode: '0700'
      delegate_to: localhost
      run_once: true

    - name: Set admin password log path
      ansible.builtin.set_fact:
        admin_password_log: "{{ playbook_dir }}/password_logs/ad_admin_passwords_{{ ansible_date_time.epoch }}.txt"

    - name: Create admin password log
      ansible.builtin.copy:
        content: |
          # AD Administrator Password Reset - {{ ansible_date_time.iso8601 }}
          # Domain: {{ ansible_domain }}
          # Server: {{ inventory_hostname }}
          # ⚠️  CRITICAL: SECURE THIS FILE - Contains admin passwords

        dest: "{{ admin_password_log }}"
        mode: '0600'
      delegate_to: localhost
      run_once: true

    - name: Get members of admin groups
      ansible.windows.win_powershell:
        script: |
          $adminGroups = @('Domain Admins', 'Enterprise Admins', 'Schema Admins')
          $adminUsers = @()

          foreach ($group in $adminGroups) {
            try {
              $members = Get-ADGroupMember -Identity $group -ErrorAction SilentlyContinue |
                Where-Object {$_.objectClass -eq 'user'} |
                Select-Object SamAccountName, Name, @{Name='Group';Expression={$group}}
              $adminUsers += $members
            } catch {
              Write-Host "Group not found: $group"
            }
          }

          # Add built-in administrator
          $adminUsers += Get-ADUser -Filter {SamAccountName -eq "Administrator"} |
            Select-Object SamAccountName, Name, @{Name='Group';Expression={'Built-in'}}

          $adminUsers | ConvertTo-Json -Depth 3
      register: admin_users_raw

    - name: Parse admin users
      ansible.builtin.set_fact:
        admin_users: "{{ admin_users_raw.output[0] | from_json }}"

    - name: Display admin accounts found
      ansible.builtin.debug:
        msg:
          - "Found {{ admin_users | length }} administrator accounts:"
          - "{{ admin_users | map(attribute='SamAccountName') | list | join(', ') }}"

    - name: Add specified admin accounts
      ansible.builtin.set_fact:
        all_admin_accounts: "{{ (admin_users | map(attribute='SamAccountName') | list + admin_accounts) | unique }}"

    - name: Verify admin accounts exist
      ansible.windows.win_powershell:
        script: |
          $username = "{{ item }}"
          try {
            $user = Get-ADUser -Identity $username -ErrorAction Stop
            Write-Output "EXISTS: $username"
          } catch {
            Write-Output "NOT_FOUND: $username"
          }
      loop: "{{ all_admin_accounts }}"
      register: admin_verify

    - name: Filter to existing accounts
      ansible.builtin.set_fact:
        verified_admins: "{{ admin_verify.results |
                            selectattr('output.0', 'search', 'EXISTS') |
                            map(attribute='item') |
                            list }}"

    - name: Display accounts to change
      ansible.builtin.debug:
        msg: "Changing passwords for: {{ verified_admins | join(', ') }}"

    - name: Pause for confirmation
      ansible.builtin.pause:
        prompt: |

          🔐 WARNING: About to change {{ verified_admins | length }} ADMINISTRATOR passwords!

          Accounts: {{ verified_admins | join(', ') }}

          ⚠️  Make sure you have another way to access AD if this fails!

          Press ENTER to continue or Ctrl+C then 'a' to abort
      tags: [confirm]

    - name: Generate admin passwords
      ansible.builtin.set_fact:
        admin_passwords: "{{ admin_passwords | default({}) |
                            combine({item: lookup('ansible.builtin.password',
                            '/dev/null',
                            length=password_length,
                            chars=['ascii_letters', 'digits', '!@#$%^&*()_+-='])}) }}"
      loop: "{{ verified_admins }}"
      no_log: true

    - name: Change admin passwords
      ansible.windows.win_powershell:
        script: |
          $username = "{{ item.key }}"
          $password = "{{ item.value }}"

          try {
            $securePassword = ConvertTo-SecureString -String $password -AsPlainText -Force
            Set-ADAccountPassword -Identity $username -NewPassword $securePassword -Reset

            # Don't force change for admins
            Set-ADUser -Identity $username -ChangePasswordAtLogon $false

            # Unlock if locked
            Unlock-ADAccount -Identity $username -ErrorAction SilentlyContinue

            Write-Output "SUCCESS: Changed password for $username"
          } catch {
            Write-Output "ERROR: Failed for $username - $_"
            exit 1
          }
      loop: "{{ admin_passwords | dict2items }}"
      loop_control:
        label: "{{ item.key }}"
      no_log: true
      register: admin_pw_results

    - name: Log admin passwords
      ansible.builtin.lineinfile:
        path: "{{ admin_password_log }}"
        line: "{{ item.key }}: {{ item.value }}"
        create: false
      loop: "{{ admin_passwords | dict2items }}"
      loop_control:
        label: "{{ item.key }}"
      delegate_to: localhost
      no_log: true

    - name: Create formatted password sheet
      ansible.builtin.copy:
        content: |
          ╔══════════════════════════════════════════════════════════════╗
          ║           AD ADMINISTRATOR PASSWORDS                         ║
          ║           {{ ansible_date_time.iso8601 }}                                 ║
          ╚══════════════════════════════════════════════════════════════╝

          Domain: {{ ansible_domain }}
          Server: {{ inventory_hostname }}

          {% for username in verified_admins | sort %}
          ┌─────────────────────────────────────────────────────────────┐
          │ Username: {{ username }}
          │ Password: {{ admin_passwords[username] }}
          └─────────────────────────────────────────────────────────────┘

          {% endfor %}

          ⚠️  CRITICAL SECURITY NOTES:

          1. MEMORIZE THESE PASSWORDS IMMEDIATELY
          2. Store in password manager
          3. DELETE this file after memorization
          4. Do not email or share insecurely
          5. Test login before deleting file

          To test (from Windows):
            runas /user:{{ ansible_domain }}\Administrator cmd

          To test (from Linux):
            smbclient //{{ inventory_hostname }}/C$ -U Administrator
        dest: "{{ admin_password_log | regex_replace('\\.txt$', '_formatted.txt') }}"
        mode: '0600'
      delegate_to: localhost

    - name: Display results
      ansible.builtin.debug:
        msg:
          - ""
          - "✅ Changed {{ admin_pw_results.results | selectattr('failed', 'undefined') | list | length }} admin passwords"
          - ""
          - "📄 Password files:"
          - "   - {{ admin_password_log }}"
          - "   - {{ admin_password_log | regex_replace('\\.txt$', '_formatted.txt') }}"
          - ""
          - "⚠️  CRITICAL: SECURE THESE FILES NOW!"
          - ""

    - name: Send alert
      ansible.builtin.uri:
        url: "{{ discord_webhook_url }}"
        method: POST
        body_format: json
        body:
          content: |
            🔐 **ADMIN PASSWORD RESET**

            **Server:** {{ inventory_hostname }}
            **Accounts changed:** {{ verified_admins | length }}
            **Time:** {{ ansible_date_time.iso8601 }}

            ⚠️ **CHECK SECURE PASSWORD LOG**
        status_code: [200, 204]
      when: discord_webhook_url is defined
      delegate_to: localhost
      failed_when: false
