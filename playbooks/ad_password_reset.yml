---
# ================== PURPOSE ==================
# Change All Active Directory User Passwords
# - Excludes administrators and service accounts
# - Generates strong random passwords
# - Logs password changes for team reference
# - Optionally forces password change at next logon
# =============================================
# USAGE:
#   ansible-playbook playbooks/ad_password_reset.yml
#   ansible-playbook playbooks/ad_password_reset.yml --tags generate-only
#   ansible-playbook playbooks/ad_password_reset.yml -e force_change_at_logon=false

- name: Change All AD User Passwords (Exclude Admins)
  hosts: windows:&ad_servers
  gather_facts: true

  vars:
    # Password complexity requirements
    password_length: 16
    password_complexity: true

    # Force users to change password at next logon
    force_change_at_logon: true

    # Users to exclude (case-insensitive)
    excluded_users:
      - "Administrator"
      - "Guest"
      - "krbtgt"
      - "sysadmin"
      - "backup"
      - "service"
      - "sql"
      - "iis"
      - "exchange"

    # Groups to exclude (members of these groups won't have passwords changed)
    excluded_groups:
      - "Domain Admins"
      - "Enterprise Admins"
      - "Schema Admins"
      - "Administrators"

    # Output file for password list
    password_log_file: "./ad_passwords_{{ ansible_date_time.epoch }}.txt"

  tasks:
    - name: Ensure output directory exists
      ansible.builtin.file:
        path: "{{ playbook_dir }}/password_logs"
        state: directory
        mode: '0700'
      delegate_to: localhost
      when: inventory_hostname == play_hosts[0]
      tags: [always]

    - name: Set password log file path
      ansible.builtin.set_fact:
        password_log_file: "{{ playbook_dir }}/password_logs/ad_passwords_{{ ansible_date_time.epoch }}.txt"
      tags: [always]

    - name: Create initial log file
      ansible.builtin.copy:
        content: |
          # AD Password Reset - {{ ansible_date_time.iso8601 }}
          # Domain: {{ ansible_domain }}
          # Server: {{ inventory_hostname }}
          # WARNING: SECURE THIS FILE - Contains plaintext passwords

        dest: "{{ password_log_file }}"
        mode: '0600'
      delegate_to: localhost
      when: inventory_hostname == play_hosts[0]
      tags: [always]

    - name: Get list of all AD users
      ansible.windows.win_powershell:
        script: |
          Get-ADUser -Filter * -Properties MemberOf, Enabled, PasswordNeverExpires |
            Select-Object SamAccountName, Name, Enabled, PasswordNeverExpires,
                          @{Name='Groups';Expression={$_.MemberOf -join ';'}} |
            ConvertTo-Json -Depth 3
      register: ad_users_raw
      tags: [always]

    - name: Parse AD users
      ansible.builtin.set_fact:
        ad_users: "{{ ad_users_raw.output[0] | from_json }}"
      tags: [always]

    - name: Display total users found
      ansible.builtin.debug:
        msg: "Found {{ ad_users | length }} total AD users"
      tags: [always]

    - name: Get members of excluded groups
      ansible.windows.win_powershell:
        script: |
          $excludedGroups = @({{ excluded_groups | map('quote') | join(',') }})
          $excludedUsers = @()

          foreach ($group in $excludedGroups) {
            try {
              $members = Get-ADGroupMember -Identity $group -Recursive -ErrorAction SilentlyContinue |
                Where-Object {$_.objectClass -eq 'user'} |
                Select-Object -ExpandProperty SamAccountName
              $excludedUsers += $members
            } catch {
              # Group might not exist, continue
            }
          }

          $excludedUsers | Select-Object -Unique | ConvertTo-Json
      register: group_excluded_users_raw
      tags: [always]

    - name: Parse excluded group members
      ansible.builtin.set_fact:
        group_excluded_users: "{{ group_excluded_users_raw.output[0] | from_json | default([]) }}"
      when: group_excluded_users_raw.output[0] != ""
      tags: [always]

    - name: Set empty excluded list if no members
      ansible.builtin.set_fact:
        group_excluded_users: []
      when: group_excluded_users_raw.output[0] == ""
      tags: [always]

    - name: Filter users for password change
      ansible.builtin.set_fact:
        users_to_change: "{{ ad_users | selectattr('Enabled', 'equalto', true) |
                             rejectattr('SamAccountName', 'in', excluded_users | map('lower') | list) |
                             rejectattr('SamAccountName', 'in', group_excluded_users | map('lower') | list) |
                             list }}"
      tags: [always]

    - name: Display users to be changed
      ansible.builtin.debug:
        msg:
          - "Users to change passwords: {{ users_to_change | length }}"
          - "Excluded by name: {{ excluded_users | length }}"
          - "Excluded by group membership: {{ group_excluded_users | length }}"
          - "Disabled accounts: {{ ad_users | rejectattr('Enabled', 'equalto', true) | list | length }}"
      tags: [always]

    - name: List users that will be changed
      ansible.builtin.debug:
        msg: "{{ item.SamAccountName }} ({{ item.Name }})"
      loop: "{{ users_to_change }}"
      loop_control:
        label: "{{ item.SamAccountName }}"
      tags: [list]

    - name: Generate random passwords for users
      ansible.builtin.set_fact:
        user_passwords: "{{ user_passwords | default({}) |
                           combine({item.SamAccountName: lookup('ansible.builtin.password',
                           '/dev/null',
                           length=password_length,
                           chars=['ascii_letters', 'digits', '!@#$%^&*'])}) }}"
      loop: "{{ users_to_change }}"
      loop_control:
        label: "{{ item.SamAccountName }}"
      no_log: true
      tags: [generate, change]

    - name: Log generated passwords
      ansible.builtin.lineinfile:
        path: "{{ password_log_file }}"
        line: "{{ item.key }},{{ item.value }},{{ (users_to_change | selectattr('SamAccountName', 'equalto', item.key) | first).Name }}"
        create: false
      loop: "{{ user_passwords | dict2items }}"
      loop_control:
        label: "{{ item.key }}"
      delegate_to: localhost
      no_log: true
      tags: [generate, change]

    - name: Display password log location
      ansible.builtin.debug:
        msg:
          - "Passwords generated and logged to: {{ password_log_file }}"
          - "SECURE THIS FILE IMMEDIATELY"
          - "Format: username,password,full_name"
      tags: [generate, change]

    - name: Pause for confirmation (can skip with --skip-tags confirm)
      ansible.builtin.pause:
        prompt: |

          ⚠️  WARNING: About to change {{ users_to_change | length }} user passwords!

          Excluded users: {{ excluded_users | join(', ') }}
          Excluded groups: {{ excluded_groups | join(', ') }}

          Password log: {{ password_log_file }}

          Press ENTER to continue or Ctrl+C then 'a' to abort
      tags: [confirm, change]

    - name: Change user passwords
      ansible.windows.win_powershell:
        script: |
          $username = "{{ item.key }}"
          $password = "{{ item.value }}"
          $forceChange = [System.Convert]::ToBoolean("{{ force_change_at_logon }}")

          try {
            # Convert password to secure string
            $securePassword = ConvertTo-SecureString -String $password -AsPlainText -Force

            # Set password
            Set-ADAccountPassword -Identity $username -NewPassword $securePassword -Reset

            # Optionally force change at next logon
            if ($forceChange) {
              Set-ADUser -Identity $username -ChangePasswordAtLogon $true
            }

            # Unlock account if locked
            Unlock-ADAccount -Identity $username -ErrorAction SilentlyContinue

            Write-Output "SUCCESS: Changed password for $username"
          } catch {
            Write-Output "ERROR: Failed to change password for $username - $_"
            exit 1
          }
      loop: "{{ user_passwords | dict2items }}"
      loop_control:
        label: "{{ item.key }}"
      no_log: true
      register: password_change_results
      tags: [change]

    - name: Check for failures
      ansible.builtin.fail:
        msg: "Failed to change password for {{ item.item.key }}: {{ item.output }}"
      when:
        - item.failed is defined and item.failed
        - "'ERROR' in item.output[0]"
      loop: "{{ password_change_results.results }}"
      loop_control:
        label: "{{ item.item.key }}"
      tags: [change]

    - name: Display success count
      ansible.builtin.debug:
        msg:
          - "✅ Successfully changed {{ password_change_results.results | selectattr('failed', 'undefined') | list | length }} passwords"
          - "❌ Failed: {{ password_change_results.results | selectattr('failed', 'defined') | selectattr('failed', 'equalto', true) | list | length }}"
      tags: [change]

    - name: Create password distribution list
      ansible.builtin.template:
        src: password_distribution.txt.j2
        dest: "{{ password_log_file | regex_replace('\\.txt$', '_distribution.txt') }}"
        mode: '0600'
      delegate_to: localhost
      vars:
        template_content: |
          # AD Password Distribution List
          # Generated: {{ ansible_date_time.iso8601 }}
          # Domain: {{ ansible_domain }}

          {% for user in users_to_change | sort(attribute='SamAccountName') %}
          ==========================================
          Username: {{ user.SamAccountName }}
          Full Name: {{ user.Name }}
          New Password: {{ user_passwords[user.SamAccountName] }}
          {% if force_change_at_logon %}
          Must Change: YES (at next logon)
          {% else %}
          Must Change: NO
          {% endif %}

          {% endfor %}

          ==========================================
          INSTRUCTIONS FOR USERS:
          1. Login with username and new password above
          {% if force_change_at_logon %}
          2. You will be prompted to change password
          3. Create a NEW password (minimum 12 characters)
          4. Do not reuse the temporary password shown above
          {% else %}
          2. Password is permanent - write it down securely
          3. Do not share password with anyone
          {% endif %}
      tags: [change]

    - name: Log completion
      ansible.builtin.lineinfile:
        path: "{{ password_log_file }}"
        line: |

          # Password reset completed: {{ ansible_date_time.iso8601 }}
          # Users changed: {{ users_to_change | length }}
          # Users excluded: {{ (ad_users | length) - (users_to_change | length) }}
        create: false
      delegate_to: localhost
      tags: [change]

    - name: Send completion alert to Discord
      ansible.builtin.uri:
        url: "{{ discord_webhook_url }}"
        method: POST
        body_format: json
        body:
          content: |
            🔐 **AD Password Reset Complete**

            **Server:** {{ inventory_hostname }}
            **Domain:** {{ ansible_domain }}
            **Time:** {{ ansible_date_time.iso8601 }}

            **Results:**
            - Passwords changed: {{ users_to_change | length }}
            - Users excluded: {{ (ad_users | length) - (users_to_change | length) }}
            - Password log: `{{ password_log_file | basename }}`

            ⚠️ **IMPORTANT:** Secure password log file immediately!
        status_code: [200, 204]
      when: discord_webhook_url is defined and inventory_hostname == play_hosts[0]
      delegate_to: localhost
      failed_when: false
      tags: [change, alert]

    - name: Display final instructions
      ansible.builtin.debug:
        msg:
          - ""
          - "✅ Password reset complete!"
          - ""
          - "📄 Password files created:"
          - "   - CSV log: {{ password_log_file }}"
          - "   - Distribution list: {{ password_log_file | regex_replace('\\.txt$', '_distribution.txt') }}"
          - ""
          - "⚠️  CRITICAL NEXT STEPS:"
          - "   1. SECURE THESE FILES IMMEDIATELY"
          - "   2. Distribute passwords to users via secure channel"
          - "   3. Delete password files after distribution"
          - "   4. Verify users can login"
          - ""
          - "🔒 Security reminders:"
          - "   - Do not email passwords"
          - "   - Do not store in plain text long-term"
          - "   - Consider encrypted password manager"
          - "   {% if force_change_at_logon %}- Users must change passwords at next login{% endif %}"
          - ""
      tags: [always]

- name: Verify password changes
  hosts: windows:&ad_servers
  gather_facts: false

  tasks:
    - name: Check AD replication status
      ansible.windows.win_powershell:
        script: |
          $replStatus = Get-ADReplicationPartnerMetadata -Target $env:COMPUTERNAME |
            Select-Object Partner, LastReplicationSuccess, LastReplicationResult

          $replStatus | ConvertTo-Json
      register: replication_status
      tags: [verify]

    - name: Display replication status
      ansible.builtin.debug:
        var: replication_status.output
      tags: [verify]

    - name: Test sample user login (optional)
      ansible.builtin.debug:
        msg: "To test: runas /user:DOMAIN\\username cmd"
      tags: [verify, never]
