---
# ================== PURPOSE ==================
# On-Demand Intrusion Check
# - Runs detection scans immediately
# - Useful for manual triggers during competition
# - Can be called from external scripts or cron
# =============================================
# USAGE:
#   ansible-playbook playbooks/check_intrusions.yml
#   ansible-playbook playbooks/check_intrusions.yml --limit ubuntu_ecom
#   ansible-playbook playbooks/check_intrusions.yml --tags processes

- name: Scan for Active Intrusions
  hosts: linux
  become: true
  gather_facts: true
  tags: [intrusion_check, scan]

  vars:
    alert_message: ""

  tasks:
    - name: Check for suspicious processes
      ansible.builtin.shell: |
        set -o pipefail
        ps auxww | grep -E 'nc -[el]|bash -i.*dev/tcp|python.*socket.*connect|perl.*socket' | grep -v grep
      register: suspicious_procs
      changed_when: false
      failed_when: false
      tags: [processes]

    - name: Alert on suspicious processes
      ansible.builtin.set_fact:
        alert_message: "Suspicious process detected: {{ suspicious_procs.stdout_lines | join(', ') }}"
      when: suspicious_procs.stdout_lines | length > 0
      notify: Alert critical intrusion
      tags: [processes]

    - name: Check for unexpected listening ports
      ansible.builtin.shell: |
        set -o pipefail
        ss -tulnp | grep -E ':(4444|5555|6666|7777|8888|9999|31337)' | grep LISTEN
      register: suspicious_ports
      changed_when: false
      failed_when: false
      tags: [network]

    - name: Alert on suspicious ports
      ansible.builtin.set_fact:
        alert_message: "Suspicious listening port detected: {{ suspicious_ports.stdout_lines | join(', ') }}"
      when: suspicious_ports.stdout_lines | length > 0
      notify: Alert critical intrusion
      tags: [network]

    - name: Check for unauthorized users with UID 0
      ansible.builtin.shell: |
        awk -F: '$3 == 0 && $1 != "root" {print $1}' /etc/passwd
      register: root_users
      changed_when: false
      failed_when: false
      tags: [users]

    - name: Alert on unauthorized root users
      ansible.builtin.set_fact:
        alert_message: "Unauthorized UID 0 user detected: {{ root_users.stdout_lines | join(', ') }}"
      when: root_users.stdout_lines | length > 0
      notify: Alert critical intrusion
      tags: [users]

    - name: Check for SUID binaries in temp directories
      ansible.builtin.shell: |
        find /tmp /var/tmp /dev/shm -type f -perm -4000 2>/dev/null
      register: suspicious_suid
      changed_when: false
      failed_when: false
      tags: [files]

    - name: Alert on suspicious SUID files
      ansible.builtin.set_fact:
        alert_message: "SUID binary in suspicious location: {{ suspicious_suid.stdout_lines | join(', ') }}"
      when: suspicious_suid.stdout_lines | length > 0
      notify: Alert critical intrusion
      tags: [files]

    - name: Check recent failed login attempts
      ansible.builtin.shell: |
        set -o pipefail
        grep "Failed password" /var/log/auth.log 2>/dev/null | tail -20 || \
        grep "Failed password" /var/log/secure 2>/dev/null | tail -20
      register: failed_logins
      changed_when: false
      failed_when: false
      tags: [auth]

    - name: Display failed logins
      ansible.builtin.debug:
        msg: "Recent failed logins: {{ failed_logins.stdout_lines }}"
      when: failed_logins.stdout_lines | length > 0
      tags: [auth]

    - name: Check honeypot access (auditd logs)
      ansible.builtin.shell: |
        set -o pipefail
        ausearch -k honeypot_access -ts recent 2>/dev/null | grep -v "type=CONFIG_CHANGE" || true
      register: honeypot_hits
      changed_when: false
      failed_when: false
      when: ansible_os_family == "RedHat"
      tags: [honeypots]

    - name: Alert on honeypot access
      ansible.builtin.set_fact:
        alert_message: "Honeypot accessed - check auditd logs"
      when:
        - ansible_os_family == "RedHat"
        - honeypot_hits.stdout | length > 0
      notify: Alert critical intrusion
      tags: [honeypots]

  handlers:
    - name: Alert critical intrusion
      ansible.builtin.uri:
        url: "{{ discord_webhook_url }}"
        method: POST
        body_format: json
        body:
          content: "ðŸš¨ **INTRUSION CHECK ALERT**\n**Host:** {{ inventory_hostname }}\n**Event:** {{ alert_message }}\n**Time:** {{ ansible_date_time.iso8601 }}"
        status_code: [200, 204]
      when: discord_webhook_url is defined
      failed_when: false

- name: Send scan completion notification
  hosts: localhost
  gather_facts: false
  tags: [notify]

  tasks:
    - name: Post scan results to Discord
      ansible.builtin.uri:
        url: "{{ discord_webhook_url }}"
        method: POST
        body_format: json
        body:
          content: "âœ… Intrusion scan completed at {{ lookup('pipe', 'date') }}"
        status_code: [200, 204]
      when: discord_webhook_url is defined
      failed_when: false
